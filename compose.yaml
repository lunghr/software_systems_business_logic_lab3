services:
  database_cassandra:
    container_name: database_cassandra
    image: cassandra:latest
    environment:
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "DESCRIBE KEYSPACES" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    ports:
      - '9042:9042'
    volumes:
      - cassandra_data:/var/lib/cassandra
    expose:
      - '9042'
    networks:
      - app_network


  database_postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres -U postgres" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    ports:
      - '5432:5432'
    volumes:
      - ./init-users.sh:/docker-entrypoint-initdb.d/init-users.sh
      - pgdata:/var/lib/postgresql/data
    expose:
      - '5432'
    networks:
      - app_network


  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "13228:8080"
    environment:
      ADMINER_DEFAULT_SERVER: database_postgres
    networks:
      - app_network


  backend:
    container_name: 'backend-blps'
    image: 'lunghr/blps-3:latest'
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    depends_on:
      database_cassandra:
        condition: service_healthy
      database_postgres:
        condition: service_healthy
    environment:
      SPRING_CASSANDRA_CONTACT_POINTS: ${SPRING_CASSANDRA_CONTACT_POINTS}
      SPRING_CASSANDRA_PORT: ${SPRING_CASSANDRA_PORT}
      SPRING_CASSANDRA_LOCAL_DATACENTER: ${SPRING_CASSANDRA_LOCAL_DATACENTER}
      DB_URL: ${DB_DOCKER_URL}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - app_network

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - app_network

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.5
    ports:
      - "9092:9092"
      - "29092:29092"
    expose:
      - '9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - app_network

networks:
  app_network:
    external: true

volumes:
  cassandra_data: { }
  pgdata: { }